{"version":3,"file":"static/js/808.295546cb.chunk.js","mappings":"4MACA,EAAuB,wB,SCoBvB,EAhBkB,SAACA,GACjB,OACE,gBAAIC,UAAWC,EAAf,WACE,+BACE,iCACE,uBAAIF,EAAMG,UAEZ,gCAAaH,EAAMI,aAErB,SAAC,KAAD,CAAMH,UAAU,MAAMI,GAAE,kBAAaL,EAAMM,IAA3C,+BAKL,EClBD,EAAuB,wBAAvB,EAAyD,2BC2DzD,EA3CkB,SAACN,GAEjB,IAbkBO,EAAQC,EAapBC,GAAUC,EAAAA,EAAAA,MACVC,GAAWC,EAAAA,EAAAA,MAIXC,EAAiD,QAFnC,IAAIC,gBAAgBH,EAASI,QAEVC,IAAI,QAErCC,GApBYV,EAoBcP,EAAMO,OApBZC,EAoBoBK,EAnBvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOb,GAAKc,EAAOd,GAAK,GAAK,EAE7Ba,EAAOb,GAAKc,EAAOd,GAAK,GAAK,CAEvC,KA4BD,OACE,UAAC,EAAAe,SAAD,YACE,gBAAKpB,UAAWC,EAAhB,UACE,oBAAQoB,QAbe,WAG3Bb,EAAQc,KAAK,CACXC,SAASb,EAASa,SAClBT,OAAO,SAAD,OAAYF,EAAqB,OAAS,QAGnD,EAKK,mBAA8CA,EAAqB,aAAe,kBAEpF,eAAIZ,UAAWC,EAAf,SACGe,EAAaQ,KAAI,SAACC,GAAD,OAChB,SAAC,EAAD,CAEEpB,GAAIoB,EAAMpB,GACVF,OAAQsB,EAAMtB,OACdD,KAAMuB,EAAMvB,MAHPuB,EAAMpB,GAFG,QAWzB,E,SCzDD,EAA2B,gCCa3B,EAXsB,WACpB,OACE,iBAAKL,UAAWC,EAAhB,WACE,6CACA,SAAC,KAAD,CAAMD,UAAU,MAAMI,GAAG,cAAzB,2BAKL,E,kBC2BD,EAhCkB,WAEd,OAA0DsB,EAAAA,EAAAA,GAAQC,EAAAA,IAAc,GAAxEC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAcC,EAAnC,EAA6BC,KAAoBC,EAAjD,EAAiDA,MAMjD,OAJAC,EAAAA,EAAAA,YAAU,WACNL,GACH,GAAC,CAACA,IAEY,YAAXC,GAEI,gBAAK7B,UAAU,WAAf,UACI,SAACkC,EAAA,EAAD,MAMRF,GACO,cAAGhC,UAAU,mBAAb,SAAiCgC,IAG7B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,QAKzD,SAAC,EAAD,CAAW7B,OAAQwB,KAJZ,SAAC,EAAD,GAQd,C","sources":["webpack://react-complete-guide/./src/components/quotes/QuoteItem.module.css?127c","components/quotes/QuoteItem.js","webpack://react-complete-guide/./src/components/quotes/QuoteList.module.css?9d5d","components/quotes/QuoteList.js","webpack://react-complete-guide/./src/components/quotes/NoQuotesFound.module.css?2c4b","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"QuoteItem_item__NnLer\"};","import { Link } from 'react-router-dom';\n\nimport classes from './QuoteItem.module.css';\n\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className='btn' to={`/quotes/${props.id}`}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"QuoteList_list__zvosQ\",\"sorting\":\"QuoteList_sorting__9p02R\"};","import { Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\n\nconst QuoteList = (props) => {\n\n  const history = useHistory(); //so you can change the url\n  const location = useLocation(); //so you can get the current url\n\n  const queryParams = new URLSearchParams(location.search); //get query params set\n\n  const isSortingAscending = queryParams.get('sort') === 'asc'; //keyword to get the specific query parameters with sort\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending); \n  //calling function that sorts all quotes, based on asc or desc query params\n  //gives back array of objects\n\n\n  const changeSortingHandler = () => {\n\n    //another way to write the code below, but more readable! \n    history.push({\n      pathname:location.pathname, \n      search: `?sort=${(isSortingAscending ? 'desc' : 'asc')}`,\n    })\n    //history.push(`${location.pathname}?sort=${(isSortingAscending ? 'desc' : 'asc')}`); //we are changing the url to include query parameters\n  }\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}> Sort {isSortingAscending ? 'Descending' : 'Ascending'}</button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","// extracted by mini-css-extract-plugin\nexport default {\"noquotes\":\"NoQuotesFound_noquotes__8E6KJ\"};","import classes from './NoQuotesFound.module.css';\nimport { Link } from 'react-router-dom';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to='/new-quotes'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from \"react\";\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport LoadingSpinner from \"../components/ui/LoadingSpinner\";\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from '../lib/api';\r\n\r\nconst AllQuotes = () => {\r\n\r\n    const { sendRequest, status, data: loadedQuotes, error} = useHttp(getAllQuotes, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest(); //wehnever componenets end\r\n    },[sendRequest])\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className='centered'>\r\n                <LoadingSpinner />\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    if (error) {\r\n        return <p className='centered focused'>{error}</p>\r\n    }\r\n\r\n    if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n        return <NoQuotesFound />\r\n    }\r\n\r\n    return (\r\n        <QuoteList quotes={loadedQuotes}/>\r\n    \r\n    )\r\n\r\n}\r\n\r\nexport default AllQuotes;"],"names":["props","className","classes","text","author","to","id","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","Fragment","onClick","push","pathname","map","quote","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"sourceRoot":""}